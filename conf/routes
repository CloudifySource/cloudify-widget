# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
POST     /widget/description            controllers.WidgetAdmin.postWidgetDescription(authToken:String, widgetId:Long, description:String ?="")
POST     /widget/requireLogin            controllers.WidgetAdmin.postRequireLogin(authToken:String, widgetId:Long, requireLogin:Boolean, loginVerificationUrl:String ?="", webServicePrivateKey:String?="")
GET     /exportSchema                   controllers.Application.generateDDL
GET     /javascriptRoutes               controllers.Application.javascriptRoutes


#Demos
GET     /demos/loginWithGoogle           controllers.Demos.loginWithGoogle
GET     /demos/googleLoginCallback       controllers.Demos.googleLoginCallback
GET     /demos/embedded/:email           controllers.DemosController.getEmbeddedDemoPage( email:String )
GET     /demos/:userId/list              controllers.DemosController.listWidgetForDemoUser( userId:Long )
GET     /demos/:userId/:apiKey           controllers.DemosController.getDemoPageForWidget( userId:Long, apiKey:String )
GET     /demos/:email                    controllers.DemosController.getDemoPageForUser( email:String )
POST    /demos/verifyWidgetLogin         controllers.Demos.validateUserIdFromLogin(userId:String)

# Widget
POST     /widget/start		     	    controllers.Application.start( apiKey: String, hpcsKey:String ?= "", hpcsSecretKey:String ?= "", userId:String?="" )
POST     /widget/:instanceId/stop	    controllers.Application.stop( apiKey: String, instanceId: String)
GET      /widget/:instanceId/status     controllers.Application.getWidgetStatus( apiKey: String, instanceId: String )
GET      /widget/:instanceId/pem        controllers.Application.downloadPemFile( instanceId:String )



# Admin API
GET     /user/widgetsTemplate           controllers.WidgetAdmin.getUserWidgetTemplate
GET     /admin/checkPasswordStrength    controllers.WidgetAdmin.checkPasswordStrength( password:String,  email:String )
GET     /admin/passwordStrength         controllers.WidgetAdmin.getPasswordMatch( authToken:String, password:String)
POST    /admin/changePassword           controllers.WidgetAdmin.postChangePassword( authToken:String, oldPassword:String, newPassword:String, confirmPassword:String )
POST     /admin/resetPassword           controllers.WidgetAdmin.postResetPassword( email:String, h:String )
GET      /admin/resetPasswordAction     controllers.WidgetAdmin.resetPasswordAction( p:String, pi:Long)
GET      /admin/signup                  controllers.WidgetAdmin.getSignupPage
GET     /admin/account                  controllers.WidgetAdmin.getAccountPage
GET      /admin/resetPassword           controllers.WidgetAdmin.getResetPasswordPage
GET      /admin/signin                  controllers.WidgetAdmin.getSigninPage( message:String ?= null )
GET      /admin/widgets                 controllers.WidgetAdmin.getWidgetsPage
GET      /user/widgets                  controllers.WidgetAdmin.newWidgetsPage
GET      /admin/logout                  controllers.WidgetAdmin.logout
POST     /signin	     		     	controllers.WidgetAdmin.signIn( email: String, password: String )
POST     /signup      		     		controllers.WidgetAdmin.signUp( email: String, passwordConfirmation: String, password: String, firstname: String, lastname: String  )
POST     /widget/regenerate	   			controllers.WidgetAdmin.regenerateWidgetApiKey( authToken: String, apiKey: String )
POST     /widget/:instanceId/shutdown	controllers.WidgetAdmin.shutdownInstance( authToken: String, instanceId: String )
POST     /widget/disable				controllers.WidgetAdmin.disableWidget( authToken: String, apiKey: String )
POST     /widget/enable 				controllers.WidgetAdmin.enableWidget( authToken: String, apiKey: String )
GET      /user/list	   					controllers.WidgetAdmin.getAllUsers( authToken: String )
POST     /widget/new              	    controllers.WidgetAdmin.createNewWidget( widgetId:String ?= null, authToken: String, productName: String, productVersion: String, title: String, youtubeVideoUrl: String, providerURL: String, recipeURL: String, consolename: String, consoleurl: String, rootpath:String )
GET      /widget/list 					controllers.WidgetAdmin.getAllWidgets( authToken: String )
POST    /widget/delete                  controllers.WidgetAdmin.deleteWidget( authToken:String, apiKey:String )
GET     /widget/previewWidget           controllers.WidgetAdmin.previewWidget( apiKey:String )
GET     /widget/icon                    controllers.WidgetAdmin.icon( apiKey: String)
POST    /widget/icon                    controllers.WidgetAdmin.addIcon
POST    /widget/removeIcon              controllers.WidgetAdmin.removeIcon( authToken: String, widgetId:Long )
GET      /widget/summary 				controllers.WidgetAdmin.summary( authToken: String )
GET      /server/list 					controllers.WidgetAdmin.getAllServers
GET      /server/headers            	controllers.WidgetAdmin.headers
GET     /widget/widget                  controllers.WidgetAdmin.getWidget( apiKey:String )



# Map static resources from the /public folder to the /assets URL path
GET     /recipes/*file      	   		controllers.Assets.at(path="/public/recipes", file)
GET     /public/*file  		     	    controllers.Assets.at(path="/public/cloudify", file)
GET     /assets/*file             	    controllers.Assets.at(path="/public", file)
GET     /d                              controllers.DemosController.getDemoPageForUser(email="default_demo@gigaspaces.com")
GET     /*file        		     	    controllers.Assets.at(path="/public/cloudify", file)



GET     /                               controllers.WidgetAdmin.index

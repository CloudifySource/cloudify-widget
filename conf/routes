# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
POST     /widget/description            controllers.WidgetAdmin.postWidgetDescription(authToken:String, widgetId:Long, description:String ?="")
POST     /widget/requireLogin            controllers.WidgetAdmin.postRequireLogin(authToken:String, widgetId:Long, requireLogin:Boolean, loginVerificationUrl:String ?="", webServicePrivateKey:String?="")
GET     /exportSchema                   controllers.Application.generateDDL


#Demos
GET     /demos/loginWithGoogle           controllers.Demos.loginWithGoogle
GET     /demos/googleLoginCallback       controllers.Demos.googleLoginCallback
GET     /demos/embedded/:email           controllers.DemosController.getEmbeddedDemoPage( email:String )
GET     /demos/:userId/list              controllers.DemosController.listWidgetForDemoUser( userId:Long )
GET     /demos/:userId/:apiKey           controllers.DemosController.getDemoPageForWidget( userId:Long, apiKey:String )
GET     /demos/:email                    controllers.DemosController.getDemoPageForUser( email:String )
POST    /demos/verifyWidgetLogin         controllers.Demos.validateUserIdFromLogin(userId:String)


#Backend
GET 	 /backend/getConf           	controllers.Application.getConf( name : String )
GET     /backend/widgets/:widgetId/resource/details         controllers.WidgetResources.getRecipeResourceDetails( widgetId: Long, authToken: String )
GET     /backend/widgets/:widgetId/resource/walk            controllers.WidgetResources.getWalkRecipeResourceResult( widgetId: Long, authToken: String )
POST    /backend/widgets/:widgetId/resource/refresh         controllers.WidgetResources.postManualRefreshResource( widgetId: Long, authToken:String )
GET     /backend/widgets/:widgetId/resource/content         controllers.WidgetResources.getResourceContent( widgetId: Long, authToken:String, path:String)

GET     /backend/widgets/:widgetId/provider/details         controllers.WidgetResources.getProviderResourceDetails( widgetId: Long, authToken: String )
GET     /backend/widgets/:widgetId/provider/walk            controllers.WidgetResources.getWalkProviderResourceResult( widgetId: Long, authToken: String )
POST    /backend/widgets/:widgetId/provider/refresh         controllers.WidgetResources.postManualRefreshProvider( widgetId: Long, authToken:String )
GET     /backend/widgets/:widgetId/provider/content         controllers.WidgetResources.getProviderContent( widgetId: Long, authToken:String, path:String)



POST    /backend/login                                     controllers.Application.login
GET    /backend/isLoggedIn                                 controllers.Application.isLoggedIn
POST    /backend/logout                                    controllers.Application.logout
GET     /backend/user/details                               controllers.Application.getUserDetails


GET     /backend/application/pool/status  controllers.Application.getPoolStatus


GET      /backend/widget/list 					controllers.WidgetAdmin.getAllWidgets
GET     /backend/widget/icon                    controllers.WidgetAdmin.icon( apiKey: String)
GET     /backend/widget/:widgetId/get           controllers.WidgetAdmin.getWidgetById( widgetId: Long )
GET     /backend/widget/:apiKey/public                  controllers.WidgetAdmin.getPublicWidgetDetails( apiKey : String )
POST     /backend/widget/start		     	    controllers.Application.start( apiKey: String, userId:String?="" )
POST     /backend/widget/:instanceId/stop	    controllers.Application.stopPoolInstance( apiKey: String, instanceId: String)
GET      /backend/widget/:instanceId/status     controllers.Application.getWidgetStatus( apiKey: String, instanceId: String )
POST     /backend/widget/edit                   controllers.WidgetAdmin.postWidget
POST    /backend/widget/:widgetId/delete                  controllers.WidgetAdmin.deleteWidgetById( widgetId:Long )
POST     /backend/widget/:widgetId/disable				controllers.WidgetAdmin.disableWidgetById( widgetId:Long)
POST     /backend/widget/:widgetId/enable 				controllers.WidgetAdmin.enableWidgetById( widgetId:Long)


GET     /backend/cloudNames/list                 controllers.Application.getCloudNames
GET     /backend/cloudProviders/list                 controllers.Application.getCloudProviders

GET     /backend/demo/widget/list           controllers.DemosController.listWidgetForDemoUserByEmail( email: String )

# Widget

GET      /widget/:instanceId/pem        controllers.Application.downloadPemFile( instanceId:String )
GET     /encrypt                        controllers.Application.encrypt( data:String )
GET     /decrypt                        controllers.Application.decrypt( data:String )




# User API
POST   /api/user/:userId/lead                                       controllers.LeadsController.postLead( userId:String, authToken:String )
GET    /api/user/:userId/lead/list                                  controllers.LeadsController.getLeads( userId:String, authToken:String )
GET    /api/user/:userId/lead/:email                                controllers.LeadsController.getLead( userId:String, authToken:String, email:String )
POST    /api/user/:userId/lead/:leadId/validate                      controllers.LeadsController.confirmEmail( userId:String, authToken:String, leadId:Long, confirmationCode:String )
GET     /api/admin/:userId/lead/list                                controllers.LeadsController.getAdminLeads( userId:String, authToken:String )
POST    /api/user/:userId/lead/:leadId/prolong/:instanceId          controllers.LeadsController.assignLeadToWidgetInstance( userId:String , authToken:String , leadId:Long , instanceId:Long )

GET     /api/user/:userId/widgets                                   controllers.WidgetAdmin.listWidgets( userId:Long, authToken:String )


# Admin API









GET     /widget/previewWidget           controllers.WidgetAdmin.previewWidget( apiKey:String )

GET     /server/headers               	controllers.WidgetAdmin.headers
GET     /widget/widget                  controllers.WidgetAdmin.getWidget( apiKey:String )

GET     /widget/login/google/callback/:widgetKey   controllers.WidgetGoogleLoginController.googleLoginCallback( widgetKey:String )
GET     /widget/login/google                controllers.WidgetGoogleLoginController.loginWithGoogle( widgetKey: String )
GET     /widget/login/custom            controllers.Assets.at(path="/public/cloudify/pages/logins",file="custom.html")
POST    /widget/login/custom            controllers.WidgetCustomLoginController.customLogin( widgetKey: String )







#GET     /user/pool/manage              controllers.UserPoolController.getServerNodePoolPage( authToken:String, project:String, key:String, secretKey:String)
#GET     /user/pool/manage/list         controllers.UserPoolController.getAllServers
#GET     /user/pool/summary             controllers.UserPoolController.summary

GET     /getInjectedScript              controllers.Application.getInjectScript( publicIp:String?="1.1.1.1", privateIp:String?="2.2.2.2" )


# Map static resources from the /public folder to the /assets URL path
GET     /public/*file  		     	    controllers.Assets.at(path="/public", file)
GET     /d                              controllers.DemosController.getDemoPageForUser(email="default_demo@gigaspaces.com")
GET     /*file        		     	    controllers.Assets.at(path="/public", file)


# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
GET     /exportSchema                   controllers.Application.generateDDL

#Backend
GET 	 /backend/getConf           	controllers.Application.getConf( name : String )


GET     /backend/widgets/:widgetId/resource/details         controllers.WidgetResources.getRecipeResourceDetails( widgetId: Long, authToken: String )
GET     /backend/widgets/:widgetId/resource/walk            controllers.WidgetResources.getWalkRecipeResourceResult( widgetId: Long, authToken: String )
POST    /backend/widgets/:widgetId/resource/refresh         controllers.WidgetResources.postManualRefreshResource( widgetId: Long, authToken:String )
GET     /backend/widgets/:widgetId/resource/content         controllers.WidgetResources.getResourceContent( widgetId: Long, authToken:String, path:String)

GET     /backend/widgets/:widgetId/provider/details         controllers.WidgetResources.getProviderResourceDetails( widgetId: Long, authToken: String )
GET     /backend/widgets/:widgetId/provider/walk            controllers.WidgetResources.getWalkProviderResourceResult( widgetId: Long, authToken: String )
POST    /backend/widgets/:widgetId/provider/refresh         controllers.WidgetResources.postManualRefreshProvider( widgetId: Long, authToken:String )
GET     /backend/widgets/:widgetId/provider/content         controllers.WidgetResources.getProviderContent( widgetId: Long, authToken:String, path:String)




POST    /backend/login                                     controllers.Application.login
GET    /backend/isLoggedIn                                 controllers.Application.isLoggedIn
POST    /backend/logout                                    controllers.Application.logout
GET     /backend/user/details                               controllers.Application.getUserDetails
POST    /backend/user/password/change                   controllers.Application.changePassword

GET     /backend/createMachineOutput/index              controllers.CreateMachineOutputController.index
POST     /backend/createMachineOutput/:outputId/delete              controllers.CreateMachineOutputController.delete( outputId:Long)
POST     /backend/createMachineOutput/deleteAll              controllers.CreateMachineOutputController.deleteAll
GET     /backend/createMachineOutput/countUnread              controllers.CreateMachineOutputController.countUnread
POST    /backend/createMachineOutput/markAllRead            controllers.CreateMachineOutputController.markAllRead


GET     /backend/application/pool/status  controllers.Application.getPoolStatus


GET      /backend/widget/list 					controllers.WidgetAdmin.getAllWidgets
GET     /backend/widget/icon                    controllers.WidgetAdmin.icon( apiKey: String)
GET     /backend/widget/:widgetId/get           controllers.WidgetAdmin.getWidgetById( widgetId: Long )
GET     /backend/widget/:apiKey/public                  controllers.WidgetAdmin.getPublicWidgetDetails( apiKey : String )
POST     /backend/widget/start		     	    controllers.Application.start( apiKey: String, userId:String?="" )
POST     /backend/widget/:instanceId/stop	    controllers.Application.stopPoolInstance( apiKey: String, instanceId: String)
GET      /backend/widget/:instanceId/status     controllers.Application.getWidgetStatus( apiKey: String, instanceId: String )
POST     /backend/widget/edit                   controllers.WidgetAdmin.postWidget
POST    /backend/widget/:widgetId/delete                  controllers.WidgetAdmin.deleteWidgetById( widgetId:Long )
POST     /backend/widget/:widgetId/disable				controllers.WidgetAdmin.disableWidgetById( widgetId:Long)
POST     /backend/widget/:widgetId/enable 				controllers.WidgetAdmin.enableWidgetById( widgetId:Long)
GET     /backend/widget/defaultValues                       controllers.WidgetAdmin.getWidgetDefaultValues()

GET     /backend/cloudNames/list                 controllers.Application.getCloudNames
GET     /backend/cloudProviders/list                 controllers.Application.getCloudProviders

GET     /backend/demo/widget/list           controllers.DemosController.listWidgetForDemoUserByEmail( email: String )


POST    /backend/widget/login/custom            controllers.WidgetCustomLoginController.customLogin( widgetKey: String )
GET     /backend/widget/login/google                controllers.WidgetGoogleLoginController.loginWithGoogle( widgetKey: String )
GET     /backend/widget/login/google/callback/:widgetKey   controllers.WidgetGoogleLoginController.googleLoginCallback( widgetKey:String )



POST    /backend/application/pool/clean                  controllers.Application.cleanPool
GET    /backend/application/pool/nodesByStatus                  controllers.Application.getPoolNodesByStatus


GET     /backend/application/bootstrap/script              controllers.Application.getInjectScript( publicIp:String?="1.1.1.1", privateIp:String?="2.2.2.2" )

POST    /backend/widget/:widgetId/testInstallFinishedEmail  controllers.Application.testInstallFinishedEmail( widgetId:Long )

GET     /backend/application/encrypt                        controllers.Application.encrypt( data:String )
GET     /backend/application/decrypt                        controllers.Application.decrypt( data:String )

GET      /backend/widget/:instanceId/pem        controllers.Application.downloadPemFile( instanceId:String )


